{"ast":null,"code":"function getCoordOfSquare(row, col) {\n  var squareCoord = [[], [], [], [], [], [], [], [], []];\n  var row_lower_limit = Math.floor(row / 3) * 3;\n  var row_upper_limit = (Math.floor(row / 3) + 1) * 3;\n  var col_lower_limit = Math.floor(col / 3) * 3;\n  var col_upper_limit = (Math.floor(col / 3) + 1) * 3;\n  var array_index = 0;\n\n  for (var r = row_lower_limit; r < row_upper_limit; r++) {\n    for (var i = 0; i < 3; i++) {\n      squareCoord[array_index].push(r);\n      array_index++;\n    }\n  }\n\n  array_index = 0;\n\n  for (var j = 0; j < 3; j++) {\n    for (var c = col_lower_limit; c < col_upper_limit; c++) {\n      squareCoord[array_index].push(c);\n      array_index++;\n    }\n  }\n\n  return squareCoord;\n}\n\nfunction checkValidPlacement(grid, row, col, currValue) {\n  for (var c = 0; c < 9; c++) {\n    if (grid[row][c] === currValue) {\n      return false;\n    }\n  }\n\n  for (var r = 0; r < 9; r++) {\n    if (grid[r][col] === currValue) {\n      return false;\n    }\n  }\n\n  var squareCoords = getCoordOfSquare(row, col);\n\n  for (var i = 0; i < squareCoords.length; i++) {\n    r = squareCoords[i][0];\n    c = squareCoords[i][1];\n    console.log(r, c);\n\n    if (grid[r][c] === currValue) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport var main = grid => {\n  //console.table(grid);\n  console.log(checkValidPlacement(grid, 0, 2, 5));\n};","map":{"version":3,"sources":["/Users/shayaansaiyed/Documents/Projects/Sudoku/sudoku-solver/src/sudokuSolver.js"],"names":["getCoordOfSquare","row","col","squareCoord","row_lower_limit","Math","floor","row_upper_limit","col_lower_limit","col_upper_limit","array_index","r","i","push","j","c","checkValidPlacement","grid","currValue","squareCoords","length","console","log","main"],"mappings":"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","sourcesContent":["\nfunction getCoordOfSquare(row, col){\n    var squareCoord = [[], [], [], [], [], [], [], [], []];\n    \n    var row_lower_limit = Math.floor(row / 3) * 3;\n    var row_upper_limit = (Math.floor(row / 3) + 1) * 3;\n\n    var col_lower_limit = Math.floor(col / 3) * 3;\n    var col_upper_limit = (Math.floor(col / 3) + 1) * 3; \n    \n    var array_index = 0;\n    for (var r = row_lower_limit; r < row_upper_limit; r++){\n        for(var i = 0; i < 3; i++){\n            squareCoord[array_index].push(r)\n            array_index++;\n        }\n    }\n\n    array_index = 0;\n    for(var j = 0; j < 3; j++){\n        for (var c = col_lower_limit; c < col_upper_limit; c++){\n            squareCoord[array_index].push(c)\n            array_index++;\n        }\n    }\n    return squareCoord;\n}\n\nfunction checkValidPlacement(grid, row, col, currValue){\n\n    for(var c = 0; c < 9; c++){\n        if(grid[row][c] === currValue){\n            return false;\n        }\n    }\n\n    for(var r = 0; r < 9; r++){\n        if(grid[r][col] === currValue){\n            return false;\n        }\n    }\n\n    var squareCoords = getCoordOfSquare(row, col);\n    for(var i = 0; i < squareCoords.length; i++){\n        r = squareCoords[i][0];\n        c = squareCoords[i][1];\n\n        console.log(r, c);\n\n        if (grid[r][c] === currValue){\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport var main = (grid) => {\n    //console.table(grid);\n    console.log(checkValidPlacement(grid, 0, 2, 5))\n}"]},"metadata":{},"sourceType":"module"}