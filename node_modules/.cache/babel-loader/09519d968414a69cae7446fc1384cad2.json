{"ast":null,"code":"var _jsxFileName = \"/Users/shayaansaiyed/Documents/Projects/Sudoku/sudoku-solver/src/components/Board.js\";\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport './../App.css';\nimport { SolveSudoku } from './../sudokuSolver';\n\nfunction Board(props) {\n  let initGrid = new Array(9);\n\n  for (var i = 0; i < 9; i++) {\n    initGrid[i] = new Array(9).fill(0);\n  }\n\n  let [grid, setGrid] = useState(initGrid);\n\n  let generateRow = (array, rowNum) => {\n    var row = [];\n\n    for (let i = 0; i < 9; i++) {\n      if (array[i] !== 0) {\n        row.push( /*#__PURE__*/React.createElement(Square, {\n          value: array[i],\n          row: rowNum,\n          col: i,\n          handleChange: handleValueChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 22\n          }\n        }));\n      } else {\n        row.push( /*#__PURE__*/React.createElement(Square, {\n          value: \"\",\n          row: rowNum,\n          col: i,\n          handleChange: handleValueChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 22\n          }\n        }));\n      }\n    }\n\n    return row;\n  };\n\n  let generateGrid = input2DArr => {\n    var tempgrid = [];\n\n    for (let i = 0; i < 9; i++) {\n      var row = generateRow(input2DArr[i], i);\n      tempgrid.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 23\n        }\n      }, row));\n    }\n\n    return tempgrid;\n  };\n\n  let handleValueChange = (row, col, val) => {\n    let tempGrid = grid.slice();\n    tempGrid[row][col] = val;\n    setGrid(tempGrid);\n  };\n\n  let callSudokuSolver = () => {\n    let tempGrid = grid.slice();\n    SolveSudoku(tempGrid, setGrid);\n    console.log(\"Done Solving\");\n    setGrid(tempGrid);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, generateGrid(grid))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      callSudokuSolver();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Solve For ME!\"));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/shayaansaiyed/Documents/Projects/Sudoku/sudoku-solver/src/components/Board.js"],"names":["React","useState","Square","SolveSudoku","Board","props","initGrid","Array","i","fill","grid","setGrid","generateRow","array","rowNum","row","push","handleValueChange","generateGrid","input2DArr","tempgrid","col","val","tempGrid","slice","callSudokuSolver","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Square from './Square'\nimport './../App.css';\nimport {SolveSudoku} from './../sudokuSolver';\n\nfunction Board(props) {\n  let initGrid = new Array(9);\n  for (var i = 0; i < 9; i++){\n    initGrid[i] = new Array(9).fill(0);\n  }\n\n  let [grid, setGrid] = useState(initGrid)\n  \n  let generateRow = (array, rowNum) => {\n    var row = []\n    for (let i = 0; i < 9; i++){\n        if (array[i] !== 0){\n            row.push(<Square value={array[i]} row={rowNum} col={i} handleChange={handleValueChange}/>);\n        } else {\n            row.push(<Square value='' row={rowNum} col={i} handleChange={handleValueChange}/>);\n        }\n    }\n    return row;\n  }\n\n  let generateGrid = (input2DArr) => {\n    var tempgrid = [];\n    for (let i = 0; i < 9; i++){\n        var row = generateRow(input2DArr[i], i)\n        tempgrid.push(<li>{row}</li>);\n    }\n    return tempgrid;\n  }\n\n  let handleValueChange = (row, col, val) => {\n    let tempGrid = grid.slice();\n    tempGrid[row][col] = val;\n    setGrid(tempGrid);\n  }\n\n  let callSudokuSolver = () => {\n    let tempGrid = grid.slice();\n    SolveSudoku(tempGrid, setGrid);\n    console.log(\"Done Solving\");\n    setGrid(tempGrid);\n  }\n\n  return (\n    <>  \n        <div className=\"board\">\n            <ul>{generateGrid(grid)}</ul>\n        </div>\n        <button onClick={() => {callSudokuSolver()}}>\n            Solve For ME!\n        </button>\n    </>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}